Crontab is a Unix-based utility that allows users to schedule and automate tasks to run at specific intervals. It uses a time-based job scheduler to execute commands or scripts at predefined times or intervals. 

To work with crontab, you can use the following commands:

View/Edit the Crontab:

To view or edit your current user's crontab, use the following command:

  crontab -e

This will open the crontab file in the default text editor (usually "vi" or "nano").

List Crontab Entries:

To list the current user's crontab entries, use the following command:

  crontab -l

Remove Crontab:

To remove all crontab entries for the current user, use the following command:

  crontab -r

Crontab Syntax:

The crontab syntax consists of five fields, representing the time and frequency of the task. 

Each field is separated by a space, and the order is as follows:

* * * * * command_to_be_executed
-   -    -   -    -
|    |    |    |    |
|    |    |    |    +----- Day of the Week (0 - 6) (Sunday to Saturday, 7 is also Sunday)
|    |    |   +------- Month (1 - 12)
|    |    +--------- Day of the Month (1 - 31)
|    +----------- Hour (0 - 23)
+------------- Minute (0 - 59)

In the place of each field, you can use an asterisk (*) to represent all possible values, or you can specify specific numbers or ranges. Here are some examples:

    * indicates any value (e.g., every minute, every hour, etc.).

    */5 indicates every 5 units (e.g., every 5 minutes, every 5 hours).

    1,15 indicates at the 1st and 15th unit (e.g., 1st and 15th of the month).

    1-5 indicates a range (e.g., every hour from 1 to 5).

Examples #1:

Run a script every day at 3:30 AM:
javascript

Copy code
  30 3 * * * /path/to/your_script.sh

Examples #2:

Run a script every 15 minutes:
javascript

Copy code
  */15 * * * * /path/to/your_script.sh

Examples #3:

Run a script every Monday at 8:00 PM:

Copy code
  0 20 * * 1 /path/to/your_script.sh

EXECUTION STEPS

1.	Create your script file
  vi [script_file_name].sh

2.	Give an “execution  permission" to the [script_file_name].sh
  sudo chmod +x [script_file_name].sh

3.	Schedule your cron job
  crontab -e

4.	To check or list your available/schedule cron job
  crontab -l

5.	To check or list your available/schedule cron job
  crontab -l

6.	Remove Crontab:
To remove all crontab entries for the current user, use the following command:
  crontab -r

Remember to save your changes after editing the crontab file, and the “cron daemon” will take care of executing the scheduled commands at the specified intervals. 

Make sure you use caution when scheduling tasks, especially if they involve critical operations. 

Always test your scripts and commands before adding them to a crontab.




To stop a cron job, you need to remove or comment out the corresponding entry in the crontab file. Follow these steps to stop a cron job:

Open the crontab for editing:

  crontab -e

Locate the line that represents the cron job you want to stop. It will have the same syntax as that you whan to stop:

* * * * * “command_to_be_executed”

To stop the cron job, either:
  1.	Remove the entire line or 
  2.	Comment it out by adding a # at the beginning of the line. 

Commenting out the line is useful if you want to keep the command for future reference but temporarily stop it from running.

Save your changes and exit the text editor. 

The changes will take effect immediately, and the cron job will no longer execute as scheduled.

To verify that the cron job is no longer active, you can list the crontab entries again using:

crontab -l

You should no longer see the entry for the cron job you stopped.

Remember that removing a cron job does not delete the script or command itself; it only stops its scheduled execution. 

If you want to permanently remove the cron job and its associated script or command, you can edit the crontab and remove the entry entirely.

